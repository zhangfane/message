// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alarm_event.proto

package alarm_event

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AlarmEvent struct {
	Lcuuid                  *string  `protobuf:"bytes,1,opt,name=lcuuid" json:"lcuuid,omitempty"`
	User                    *string  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Timestamp               *uint32  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	PolicyId                *uint32  `protobuf:"varint,4,opt,name=policy_id,json=policyId" json:"policy_id,omitempty"`
	PolicyName              *string  `protobuf:"bytes,5,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
	PolicyLevel             *uint32  `protobuf:"varint,6,opt,name=policy_level,json=policyLevel" json:"policy_level,omitempty"`
	PolicyAppType           *uint32  `protobuf:"varint,7,opt,name=policy_app_type,json=policyAppType" json:"policy_app_type,omitempty"`
	PolicySubType           *uint32  `protobuf:"varint,8,opt,name=policy_sub_type,json=policySubType" json:"policy_sub_type,omitempty"`
	PolicyContrastType      *uint32  `protobuf:"varint,9,opt,name=policy_contrast_type,json=policyContrastType" json:"policy_contrast_type,omitempty"`
	PolicyDataLevel         *string  `protobuf:"bytes,10,opt,name=policy_data_level,json=policyDataLevel" json:"policy_data_level,omitempty"`
	PolicyTargetUid         *string  `protobuf:"bytes,11,opt,name=policy_target_uid,json=policyTargetUid" json:"policy_target_uid,omitempty"`
	PolicyTargetName        *string  `protobuf:"bytes,12,opt,name=policy_target_name,json=policyTargetName" json:"policy_target_name,omitempty"`
	PolicyGoTo              *string  `protobuf:"bytes,13,opt,name=policy_go_to,json=policyGoTo" json:"policy_go_to,omitempty"`
	PolicyTargetField       *string  `protobuf:"bytes,14,opt,name=policy_target_field,json=policyTargetField" json:"policy_target_field,omitempty"`
	PolicyEndpoints         *string  `protobuf:"bytes,15,opt,name=policy_endpoints,json=policyEndpoints" json:"policy_endpoints,omitempty"`
	TriggerCondition        *string  `protobuf:"bytes,16,opt,name=trigger_condition,json=triggerCondition" json:"trigger_condition,omitempty"`
	TriggerValue            *float64 `protobuf:"fixed64,17,opt,name=trigger_value,json=triggerValue" json:"trigger_value,omitempty"`
	ValueUnit               *string  `protobuf:"bytes,18,opt,name=value_unit,json=valueUnit" json:"value_unit,omitempty"`
	EventLevel              *uint32  `protobuf:"varint,19,opt,name=event_level,json=eventLevel" json:"event_level,omitempty"`
	AlarmTarget             *string  `protobuf:"bytes,20,opt,name=alarm_target,json=alarmTarget" json:"alarm_target,omitempty"`
	UserId                  *uint32  `protobuf:"varint,21,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PolicyQueryUrl          *string  `protobuf:"bytes,22,opt,name=policy_query_url,json=policyQueryUrl" json:"policy_query_url,omitempty"`
	PolicyQueryConditions   *string  `protobuf:"bytes,23,opt,name=policy_query_conditions,json=policyQueryConditions" json:"policy_query_conditions,omitempty"`
	PolicyThresholdCritical *string  `protobuf:"bytes,24,opt,name=policy_threshold_critical,json=policyThresholdCritical" json:"policy_threshold_critical,omitempty"`
	PolicyThresholdError    *string  `protobuf:"bytes,25,opt,name=policy_threshold_error,json=policyThresholdError" json:"policy_threshold_error,omitempty"`
	PolicyThresholdWarning  *string  `protobuf:"bytes,26,opt,name=policy_threshold_warning,json=policyThresholdWarning" json:"policy_threshold_warning,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AlarmEvent) Reset()         { *m = AlarmEvent{} }
func (m *AlarmEvent) String() string { return proto.CompactTextString(m) }
func (*AlarmEvent) ProtoMessage()    {}
func (*AlarmEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aa9399be4f13cb1, []int{0}
}
func (m *AlarmEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlarmEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlarmEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlarmEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmEvent.Merge(m, src)
}
func (m *AlarmEvent) XXX_Size() int {
	return m.Size()
}
func (m *AlarmEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmEvent proto.InternalMessageInfo

func (m *AlarmEvent) GetLcuuid() string {
	if m != nil && m.Lcuuid != nil {
		return *m.Lcuuid
	}
	return ""
}

func (m *AlarmEvent) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *AlarmEvent) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AlarmEvent) GetPolicyId() uint32 {
	if m != nil && m.PolicyId != nil {
		return *m.PolicyId
	}
	return 0
}

func (m *AlarmEvent) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

func (m *AlarmEvent) GetPolicyLevel() uint32 {
	if m != nil && m.PolicyLevel != nil {
		return *m.PolicyLevel
	}
	return 0
}

func (m *AlarmEvent) GetPolicyAppType() uint32 {
	if m != nil && m.PolicyAppType != nil {
		return *m.PolicyAppType
	}
	return 0
}

func (m *AlarmEvent) GetPolicySubType() uint32 {
	if m != nil && m.PolicySubType != nil {
		return *m.PolicySubType
	}
	return 0
}

func (m *AlarmEvent) GetPolicyContrastType() uint32 {
	if m != nil && m.PolicyContrastType != nil {
		return *m.PolicyContrastType
	}
	return 0
}

func (m *AlarmEvent) GetPolicyDataLevel() string {
	if m != nil && m.PolicyDataLevel != nil {
		return *m.PolicyDataLevel
	}
	return ""
}

func (m *AlarmEvent) GetPolicyTargetUid() string {
	if m != nil && m.PolicyTargetUid != nil {
		return *m.PolicyTargetUid
	}
	return ""
}

func (m *AlarmEvent) GetPolicyTargetName() string {
	if m != nil && m.PolicyTargetName != nil {
		return *m.PolicyTargetName
	}
	return ""
}

func (m *AlarmEvent) GetPolicyGoTo() string {
	if m != nil && m.PolicyGoTo != nil {
		return *m.PolicyGoTo
	}
	return ""
}

func (m *AlarmEvent) GetPolicyTargetField() string {
	if m != nil && m.PolicyTargetField != nil {
		return *m.PolicyTargetField
	}
	return ""
}

func (m *AlarmEvent) GetPolicyEndpoints() string {
	if m != nil && m.PolicyEndpoints != nil {
		return *m.PolicyEndpoints
	}
	return ""
}

func (m *AlarmEvent) GetTriggerCondition() string {
	if m != nil && m.TriggerCondition != nil {
		return *m.TriggerCondition
	}
	return ""
}

func (m *AlarmEvent) GetTriggerValue() float64 {
	if m != nil && m.TriggerValue != nil {
		return *m.TriggerValue
	}
	return 0
}

func (m *AlarmEvent) GetValueUnit() string {
	if m != nil && m.ValueUnit != nil {
		return *m.ValueUnit
	}
	return ""
}

func (m *AlarmEvent) GetEventLevel() uint32 {
	if m != nil && m.EventLevel != nil {
		return *m.EventLevel
	}
	return 0
}

func (m *AlarmEvent) GetAlarmTarget() string {
	if m != nil && m.AlarmTarget != nil {
		return *m.AlarmTarget
	}
	return ""
}

func (m *AlarmEvent) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AlarmEvent) GetPolicyQueryUrl() string {
	if m != nil && m.PolicyQueryUrl != nil {
		return *m.PolicyQueryUrl
	}
	return ""
}

func (m *AlarmEvent) GetPolicyQueryConditions() string {
	if m != nil && m.PolicyQueryConditions != nil {
		return *m.PolicyQueryConditions
	}
	return ""
}

func (m *AlarmEvent) GetPolicyThresholdCritical() string {
	if m != nil && m.PolicyThresholdCritical != nil {
		return *m.PolicyThresholdCritical
	}
	return ""
}

func (m *AlarmEvent) GetPolicyThresholdError() string {
	if m != nil && m.PolicyThresholdError != nil {
		return *m.PolicyThresholdError
	}
	return ""
}

func (m *AlarmEvent) GetPolicyThresholdWarning() string {
	if m != nil && m.PolicyThresholdWarning != nil {
		return *m.PolicyThresholdWarning
	}
	return ""
}

func init() {
	proto.RegisterType((*AlarmEvent)(nil), "alarm_event.AlarmEvent")
}

func init() { proto.RegisterFile("alarm_event.proto", fileDescriptor_2aa9399be4f13cb1) }

var fileDescriptor_2aa9399be4f13cb1 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0x5f, 0x6f, 0x12, 0x4d,
	0x14, 0xc6, 0xdf, 0x7d, 0xad, 0x14, 0x0e, 0xd0, 0x96, 0x53, 0x0a, 0x53, 0xb5, 0x48, 0x35, 0x31,
	0xf8, 0x27, 0x8d, 0x17, 0xc6, 0x18, 0xef, 0x2a, 0xa2, 0x69, 0x62, 0x4c, 0x44, 0xd0, 0xc4, 0x9b,
	0xcd, 0x94, 0x1d, 0xe9, 0x24, 0xcb, 0xce, 0x3a, 0x3b, 0x8b, 0xe1, 0x9b, 0xf4, 0x23, 0x79, 0xe9,
	0x47, 0x30, 0xf8, 0x45, 0xcc, 0x9c, 0x19, 0xe8, 0xd2, 0xde, 0x31, 0xcf, 0xf3, 0x7b, 0xce, 0xce,
	0x39, 0x73, 0x02, 0x34, 0x78, 0xcc, 0xf5, 0x2c, 0x14, 0x73, 0x91, 0x98, 0x93, 0x54, 0x2b, 0xa3,
	0xb0, 0x5a, 0x90, 0x1e, 0x5c, 0x96, 0x01, 0x4e, 0xed, 0x79, 0x60, 0x8f, 0xd8, 0x82, 0x52, 0x3c,
	0xc9, 0x73, 0x19, 0xb1, 0xa0, 0x1b, 0xf4, 0x2a, 0x43, 0x7f, 0x42, 0x84, 0xad, 0x3c, 0x13, 0x9a,
	0xfd, 0x4f, 0x2a, 0xfd, 0xc6, 0x7b, 0x50, 0x31, 0x72, 0x26, 0x32, 0xc3, 0x67, 0x29, 0xbb, 0xd5,
	0x0d, 0x7a, 0xf5, 0xe1, 0x95, 0x80, 0x77, 0xa1, 0x92, 0xaa, 0x58, 0x4e, 0x16, 0xa1, 0x8c, 0xd8,
	0x16, 0xb9, 0x65, 0x27, 0x9c, 0x45, 0x78, 0x1f, 0xaa, 0xde, 0x4c, 0xf8, 0x4c, 0xb0, 0xdb, 0x54,
	0x15, 0x9c, 0xf4, 0x91, 0xcf, 0x04, 0x1e, 0x43, 0xcd, 0x03, 0xb1, 0x98, 0x8b, 0x98, 0x95, 0xa8,
	0x80, 0x0f, 0x7d, 0xb0, 0x12, 0x3e, 0x82, 0x5d, 0x8f, 0xf0, 0x34, 0x0d, 0xcd, 0x22, 0x15, 0x6c,
	0x9b, 0xa8, 0xba, 0x93, 0x4f, 0xd3, 0x74, 0xb4, 0x48, 0x45, 0x81, 0xcb, 0xf2, 0x73, 0xc7, 0x95,
	0x8b, 0xdc, 0xe7, 0xfc, 0x9c, 0xb8, 0xe7, 0xd0, 0xf4, 0xdc, 0x44, 0x25, 0x46, 0xf3, 0xcc, 0x38,
	0xb8, 0x42, 0x30, 0x3a, 0xaf, 0xef, 0x2d, 0x4a, 0x3c, 0x81, 0x86, 0x4f, 0x44, 0xdc, 0x70, 0x7f,
	0x53, 0xa0, 0x5e, 0xfc, 0x27, 0xdf, 0x72, 0xc3, 0xdd, 0x6d, 0xaf, 0x58, 0xc3, 0xf5, 0x54, 0x98,
	0xd0, 0xce, 0xb8, 0x5a, 0x64, 0x47, 0xa4, 0x8f, 0x65, 0x84, 0xcf, 0x00, 0x37, 0x59, 0x1a, 0x52,
	0x8d, 0xe0, 0xbd, 0x22, 0x4c, 0xa3, 0xea, 0xae, 0x47, 0x35, 0x55, 0xa1, 0x51, 0xac, 0x5e, 0x1c,
	0xe6, 0x7b, 0x35, 0x52, 0x78, 0x02, 0xfb, 0x9b, 0xf5, 0xbe, 0x4b, 0x11, 0x47, 0x6c, 0x87, 0xc0,
	0x46, 0xb1, 0xe0, 0x3b, 0x6b, 0xe0, 0x63, 0xf0, 0x5f, 0x09, 0x45, 0x12, 0xa5, 0x4a, 0x26, 0x26,
	0x63, 0xbb, 0xc5, 0xab, 0x0e, 0x56, 0x32, 0x3e, 0x85, 0x86, 0xd1, 0x72, 0x3a, 0x15, 0xda, 0x4e,
	0x2d, 0x92, 0x46, 0xaa, 0x84, 0xed, 0xb9, 0x9b, 0x7a, 0xa3, 0xbf, 0xd2, 0xf1, 0x21, 0xd4, 0x57,
	0xf0, 0x9c, 0xc7, 0xb9, 0x60, 0x8d, 0x6e, 0xd0, 0x0b, 0x86, 0x35, 0x2f, 0x7e, 0xb1, 0x1a, 0x1e,
	0x01, 0x90, 0x19, 0xe6, 0x89, 0x34, 0x0c, 0xa9, 0x54, 0x85, 0x94, 0x71, 0x22, 0x8d, 0xdd, 0x1c,
	0x5a, 0x5c, 0x3f, 0xed, 0x7d, 0x7a, 0x1c, 0x20, 0xc9, 0x0d, 0xfa, 0x18, 0x6a, 0x6e, 0xbf, 0x5d,
	0xaf, 0xac, 0x49, 0x15, 0xdc, 0xce, 0xbb, 0x26, 0xb1, 0x0d, 0xdb, 0x76, 0x81, 0xed, 0x62, 0x1e,
	0x50, 0xbe, 0x64, 0x8f, 0x67, 0x11, 0xf6, 0xd6, 0x8d, 0xff, 0xc8, 0x85, 0x5e, 0x84, 0xb9, 0x8e,
	0x59, 0x8b, 0xf2, 0x3b, 0x4e, 0xff, 0x64, 0xe5, 0xb1, 0x8e, 0xf1, 0x25, 0xb4, 0x37, 0xc8, 0x75,
	0xf3, 0x19, 0x6b, 0x53, 0xe0, 0xa0, 0x10, 0x58, 0x4f, 0x20, 0xc3, 0xd7, 0x70, 0xb8, 0x7a, 0x8a,
	0x0b, 0x2d, 0xb2, 0x0b, 0x15, 0x47, 0xe1, 0x44, 0x4b, 0x23, 0x27, 0x3c, 0x66, 0x8c, 0x92, 0xbe,
	0xf0, 0x68, 0xe5, 0xf7, 0xbd, 0x8d, 0x2f, 0xa0, 0x75, 0x23, 0x2b, 0xb4, 0x56, 0x9a, 0x1d, 0x52,
	0xb0, 0x79, 0x2d, 0x38, 0xb0, 0x1e, 0xbe, 0x02, 0x76, 0x23, 0xf5, 0x93, 0xeb, 0x44, 0x26, 0x53,
	0x76, 0x87, 0x72, 0xad, 0x6b, 0xb9, 0xaf, 0xce, 0x7d, 0x73, 0xf4, 0x6b, 0xd9, 0x09, 0x7e, 0x2f,
	0x3b, 0xc1, 0x9f, 0x65, 0x27, 0xb8, 0xfc, 0xdb, 0xf9, 0xef, 0x5b, 0xf1, 0x9f, 0xe3, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x35, 0xfe, 0xb8, 0xf9, 0x5a, 0x04, 0x00, 0x00,
}

func (m *AlarmEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlarmEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlarmEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyThresholdWarning != nil {
		i -= len(*m.PolicyThresholdWarning)
		copy(dAtA[i:], *m.PolicyThresholdWarning)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyThresholdWarning)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.PolicyThresholdError != nil {
		i -= len(*m.PolicyThresholdError)
		copy(dAtA[i:], *m.PolicyThresholdError)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyThresholdError)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PolicyThresholdCritical != nil {
		i -= len(*m.PolicyThresholdCritical)
		copy(dAtA[i:], *m.PolicyThresholdCritical)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyThresholdCritical)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.PolicyQueryConditions != nil {
		i -= len(*m.PolicyQueryConditions)
		copy(dAtA[i:], *m.PolicyQueryConditions)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyQueryConditions)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.PolicyQueryUrl != nil {
		i -= len(*m.PolicyQueryUrl)
		copy(dAtA[i:], *m.PolicyQueryUrl)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyQueryUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.UserId != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AlarmTarget != nil {
		i -= len(*m.AlarmTarget)
		copy(dAtA[i:], *m.AlarmTarget)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.AlarmTarget)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.EventLevel != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.EventLevel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ValueUnit != nil {
		i -= len(*m.ValueUnit)
		copy(dAtA[i:], *m.ValueUnit)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.ValueUnit)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TriggerValue != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TriggerValue))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.TriggerCondition != nil {
		i -= len(*m.TriggerCondition)
		copy(dAtA[i:], *m.TriggerCondition)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.TriggerCondition)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.PolicyEndpoints != nil {
		i -= len(*m.PolicyEndpoints)
		copy(dAtA[i:], *m.PolicyEndpoints)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyEndpoints)))
		i--
		dAtA[i] = 0x7a
	}
	if m.PolicyTargetField != nil {
		i -= len(*m.PolicyTargetField)
		copy(dAtA[i:], *m.PolicyTargetField)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyTargetField)))
		i--
		dAtA[i] = 0x72
	}
	if m.PolicyGoTo != nil {
		i -= len(*m.PolicyGoTo)
		copy(dAtA[i:], *m.PolicyGoTo)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyGoTo)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PolicyTargetName != nil {
		i -= len(*m.PolicyTargetName)
		copy(dAtA[i:], *m.PolicyTargetName)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyTargetName)))
		i--
		dAtA[i] = 0x62
	}
	if m.PolicyTargetUid != nil {
		i -= len(*m.PolicyTargetUid)
		copy(dAtA[i:], *m.PolicyTargetUid)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyTargetUid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PolicyDataLevel != nil {
		i -= len(*m.PolicyDataLevel)
		copy(dAtA[i:], *m.PolicyDataLevel)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyDataLevel)))
		i--
		dAtA[i] = 0x52
	}
	if m.PolicyContrastType != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.PolicyContrastType))
		i--
		dAtA[i] = 0x48
	}
	if m.PolicySubType != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.PolicySubType))
		i--
		dAtA[i] = 0x40
	}
	if m.PolicyAppType != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.PolicyAppType))
		i--
		dAtA[i] = 0x38
	}
	if m.PolicyLevel != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.PolicyLevel))
		i--
		dAtA[i] = 0x30
	}
	if m.PolicyName != nil {
		i -= len(*m.PolicyName)
		copy(dAtA[i:], *m.PolicyName)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.PolicyName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PolicyId != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.PolicyId))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != nil {
		i = encodeVarintAlarmEvent(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.Lcuuid != nil {
		i -= len(*m.Lcuuid)
		copy(dAtA[i:], *m.Lcuuid)
		i = encodeVarintAlarmEvent(dAtA, i, uint64(len(*m.Lcuuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlarmEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlarmEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlarmEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lcuuid != nil {
		l = len(*m.Lcuuid)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.Timestamp != nil {
		n += 1 + sovAlarmEvent(uint64(*m.Timestamp))
	}
	if m.PolicyId != nil {
		n += 1 + sovAlarmEvent(uint64(*m.PolicyId))
	}
	if m.PolicyName != nil {
		l = len(*m.PolicyName)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyLevel != nil {
		n += 1 + sovAlarmEvent(uint64(*m.PolicyLevel))
	}
	if m.PolicyAppType != nil {
		n += 1 + sovAlarmEvent(uint64(*m.PolicyAppType))
	}
	if m.PolicySubType != nil {
		n += 1 + sovAlarmEvent(uint64(*m.PolicySubType))
	}
	if m.PolicyContrastType != nil {
		n += 1 + sovAlarmEvent(uint64(*m.PolicyContrastType))
	}
	if m.PolicyDataLevel != nil {
		l = len(*m.PolicyDataLevel)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyTargetUid != nil {
		l = len(*m.PolicyTargetUid)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyTargetName != nil {
		l = len(*m.PolicyTargetName)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyGoTo != nil {
		l = len(*m.PolicyGoTo)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyTargetField != nil {
		l = len(*m.PolicyTargetField)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyEndpoints != nil {
		l = len(*m.PolicyEndpoints)
		n += 1 + l + sovAlarmEvent(uint64(l))
	}
	if m.TriggerCondition != nil {
		l = len(*m.TriggerCondition)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.TriggerValue != nil {
		n += 10
	}
	if m.ValueUnit != nil {
		l = len(*m.ValueUnit)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.EventLevel != nil {
		n += 2 + sovAlarmEvent(uint64(*m.EventLevel))
	}
	if m.AlarmTarget != nil {
		l = len(*m.AlarmTarget)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.UserId != nil {
		n += 2 + sovAlarmEvent(uint64(*m.UserId))
	}
	if m.PolicyQueryUrl != nil {
		l = len(*m.PolicyQueryUrl)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyQueryConditions != nil {
		l = len(*m.PolicyQueryConditions)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyThresholdCritical != nil {
		l = len(*m.PolicyThresholdCritical)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyThresholdError != nil {
		l = len(*m.PolicyThresholdError)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.PolicyThresholdWarning != nil {
		l = len(*m.PolicyThresholdWarning)
		n += 2 + l + sovAlarmEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlarmEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlarmEvent(x uint64) (n int) {
	return sovAlarmEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlarmEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lcuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Lcuuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyLevel", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyLevel = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyAppType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyAppType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySubType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicySubType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyContrastType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyContrastType = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyDataLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyDataLevel = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTargetUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyTargetUid = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyTargetName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyGoTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyGoTo = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTargetField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyTargetField = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyEndpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyEndpoints = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerCondition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TriggerCondition = &s
			iNdEx = postIndex
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TriggerValue = &v2
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ValueUnit = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventLevel", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventLevel = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AlarmTarget = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyQueryUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyQueryUrl = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyQueryConditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyQueryConditions = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyThresholdCritical", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyThresholdCritical = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyThresholdError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyThresholdError = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyThresholdWarning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicyThresholdWarning = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlarmEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarmEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarmEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlarmEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlarmEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlarmEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlarmEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarmEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlarmEvent = fmt.Errorf("proto: unexpected end of group")
)
